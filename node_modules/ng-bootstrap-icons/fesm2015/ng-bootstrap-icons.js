import { ElementRef, ChangeDetectorRef, Inject, Component, Input, Optional, NgModule } from '@angular/core';

class Icons {
    constructor(icons) {
        this.icons = icons;
    }
}

function uppercamelcase(str) {
    return str.toLowerCase().replace(/(?:^\w|[A-Z]|\b\w)/g, (firstLetter) => {
        return firstLetter.toUpperCase();
    }).replace(/[-_]/g, '');
}

class BootstrapIcons {
    constructor(elem, changeDetector, icons) {
        this.elem = elem;
        this.changeDetector = changeDetector;
        this.icons = icons;
    }
    ngOnChanges(changes) {
        // icons are provided as an array of objects because of "multi: true"
        const icons = Object.assign({}, ...this.icons);
        const svg = icons[uppercamelcase(changes.name.currentValue)] || '';
        if (!svg) {
            console.warn(`Icon not found: ${changes.name.currentValue}\n` +
                `Refer to documentation on https://github.com/biutas/ng-bootstrap-icons/issues`);
        }
        this.elem.nativeElement.innerHTML = svg;
        this.changeDetector.markForCheck();
    }
}
BootstrapIcons.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] }
];
BootstrapIcons.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'bt-icon, bootstrap-icon, bi',
                template: "<ng-content></ng-content>\r\n",
                styles: [":host{display:inline-block;width:24px;height:24px;fill:none;stroke-linecap:round;stroke-linejoin:round}:host svg{width:100%!important;height:100%!important}"]
            },] }
];
BootstrapIcons.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] }
];
BootstrapIcons.propDecorators = {
    name: [{ type: Input }]
};

class BootstrapIconsModule {
    constructor(icons) {
        this.icons = icons;
        if (!this.icons) {
            throw new Error(`No icon provided. Make sure to use 'BootstrapIconsModule.pick({ ... })' when importing the module\n` +
                `Refer to documentation on https://github.com/biutas/ng-bootstrap-icons/issues`);
        }
    }
    static pick(icons) {
        return {
            ngModule: BootstrapIconsModule,
            providers: [{ provide: Icons, multi: true, useValue: icons }],
        };
    }
}
BootstrapIconsModule.ctorParameters = () => [
    { type: Icons, decorators: [{ type: Optional }] }
];
BootstrapIconsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [BootstrapIcons],
                exports: [BootstrapIcons],
            },] }
];
BootstrapIconsModule.ctorParameters = () => [
    { type: Icons, decorators: [{ type: Optional }] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { BootstrapIconsModule, BootstrapIcons as ɵa, Icons as ɵb };
//# sourceMappingURL=ng-bootstrap-icons.js.map
