import { NgModule, Optional } from "@angular/core";
import { BootstrapIcons } from "./ng-bootstrap-icons.component";
import { Icons } from "./icons.provider";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './icons.provider';
export class BootstrapIconsModule {
    constructor(icons) {
        this.icons = icons;
        if (!this.icons) {
            throw new Error(`No icon provided. Make sure to use 'BootstrapIconsModule.pick({ ... })' when importing the module\n` +
                `Refer to documentation on https://github.com/biutas/ng-bootstrap-icons/issues`);
        }
    }
    static pick(icons) {
        return {
            ngModule: BootstrapIconsModule,
            providers: [{ provide: Icons, multi: true, useValue: icons }],
        };
    }
}
BootstrapIconsModule.ɵfac = function BootstrapIconsModule_Factory(t) { return new (t || BootstrapIconsModule)(ɵngcc0.ɵɵinject(ɵngcc1.Icons, 8)); };
BootstrapIconsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: BootstrapIconsModule });
BootstrapIconsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
BootstrapIconsModule.ctorParameters = () => [
    { type: Icons, decorators: [{ type: Optional }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BootstrapIconsModule, [{
        type: NgModule,
        args: [{
                declarations: [BootstrapIcons],
                exports: [BootstrapIcons]
            }]
    }], function () { return [{ type: ɵngcc1.Icons, decorators: [{
                type: Optional
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BootstrapIconsModule, { declarations: function () { return [BootstrapIcons]; }, exports: function () { return [BootstrapIcons]; } }); })();
BootstrapIconsModule.ctorParameters = () => [
    { type: Icons, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYm9vdHN0cmFwLWljb25zLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmctYm9vdHN0cmFwLWljb25zL2Jvb3RzdHJhcC1pY29ucy9uZy1ib290c3RyYXAtaWNvbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDaEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7QUFNekMsTUFBTSxPQUFPLG9CQUFvQjtBQUNqQyxJQUFFLFlBQWdDLEtBQVk7QUFDOUMsUUFEa0MsVUFBSyxHQUFMLEtBQUssQ0FBTztBQUFFLFFBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ3JCLFlBQU0sTUFBTSxJQUFJLEtBQUssQ0FDYixxR0FBcUc7QUFDN0csZ0JBQVUsK0VBQStFLENBQ2xGLENBQUM7QUFDUixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBRVg7QUFBSyxRQUNKLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxvQkFBb0I7QUFDcEMsWUFBTSxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDbkUsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7OztzRUFBQztBQUNEO0FBQStDLFlBbEJOLEtBQUssdUJBQS9CLFFBQVE7QUFBTztrREFMN0IsUUFBUSxTQUFDLG1CQUNSLFlBQVksRUFBRSxDQUFDLGNBQWM7QUFBQyxtQkFDOUI7RUFBTyxFQUFFLENBQUM7RUFBYyxDQUFDLGdCQUMxQjs7Ozs7O3VPQUNJO0FBQUU7QUFDVSxZQVBSLEtBQUssdUJBT0MsUUFBUTs7QUFUQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBaEJBLEFBQUEsQUFBQSxBQUFBLEFBTEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFMQSxBQUFBLEFBT0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBPcHRpb25hbCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEJvb3RzdHJhcEljb25zIH0gZnJvbSBcIi4vbmctYm9vdHN0cmFwLWljb25zLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBJY29ucyB9IGZyb20gXCIuL2ljb25zLnByb3ZpZGVyXCI7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0Jvb3RzdHJhcEljb25zXSxcclxuICBleHBvcnRzOiBbQm9vdHN0cmFwSWNvbnNdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQm9vdHN0cmFwSWNvbnNNb2R1bGUge1xyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgaWNvbnM6IEljb25zKSB7XHJcbiAgICBpZiAoIXRoaXMuaWNvbnMpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgIGBObyBpY29uIHByb3ZpZGVkLiBNYWtlIHN1cmUgdG8gdXNlICdCb290c3RyYXBJY29uc01vZHVsZS5waWNrKHsgLi4uIH0pJyB3aGVuIGltcG9ydGluZyB0aGUgbW9kdWxlXFxuYCArXHJcbiAgICAgICAgICBgUmVmZXIgdG8gZG9jdW1lbnRhdGlvbiBvbiBodHRwczovL2dpdGh1Yi5jb20vYml1dGFzL25nLWJvb3RzdHJhcC1pY29ucy9pc3N1ZXNgXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcGljayhpY29uczoge1xyXG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xyXG4gIH0pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEJvb3RzdHJhcEljb25zTW9kdWxlPiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogQm9vdHN0cmFwSWNvbnNNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogSWNvbnMsIG11bHRpOiB0cnVlLCB1c2VWYWx1ZTogaWNvbnMgfV0sXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=