import { Component, ElementRef, Input, Inject, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';
import { Icons } from './icons.provider';
import { uppercamelcase } from './utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './icons.provider';

const _c0 = ["*"];
export class BootstrapIcons {
    constructor(elem, changeDetector, icons) {
        this.elem = elem;
        this.changeDetector = changeDetector;
        this.icons = icons;
    }
    ngOnChanges(changes) {
        // icons are provided as an array of objects because of "multi: true"
        const icons = Object.assign({}, ...this.icons);
        const svg = icons[uppercamelcase(changes.name.currentValue)] || '';
        if (!svg) {
            console.warn(`Icon not found: ${changes.name.currentValue}\n` +
                `Refer to documentation on https://github.com/biutas/ng-bootstrap-icons/issues`);
        }
        this.elem.nativeElement.innerHTML = svg;
        this.changeDetector.markForCheck();
    }
}
BootstrapIcons.ɵfac = function BootstrapIcons_Factory(t) { return new (t || BootstrapIcons)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(Icons)); };
BootstrapIcons.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BootstrapIcons, selectors: [["bt-icon"], ["bootstrap-icon"], ["bi"]], inputs: { name: "name" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function BootstrapIcons_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%]{display:inline-block;width:24px;height:24px;fill:none;stroke-linecap:round;stroke-linejoin:round}[_nghost-%COMP%]   svg[_ngcontent-%COMP%]{width:100%!important;height:100%!important}"] });
BootstrapIcons.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] }
];
BootstrapIcons.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] }
];
BootstrapIcons.propDecorators = {
    name: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BootstrapIcons, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'bt-icon, bootstrap-icon, bi',
                template: "<ng-content></ng-content>\r\n",
                styles: [":host{display:inline-block;width:24px;height:24px;fill:none;stroke-linecap:round;stroke-linejoin:round}:host svg{width:100%!important;height:100%!important}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.Icons, decorators: [{
                type: Inject,
                args: [Icons]
            }] }]; }, { name: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYm9vdHN0cmFwLWljb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmctYm9vdHN0cmFwLWljb25zL2Jvb3RzdHJhcC1pY29ucy9uZy1ib290c3RyYXAtaWNvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsSCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7Ozs7QUFTekMsTUFBTSxPQUFPLGNBQWM7QUFBSSxJQUc3QixZQUNVLElBQWdCLEVBQ2hCLGNBQWlDLEVBQ2xCLEtBQVk7QUFDcEMsUUFIUyxTQUFJLEdBQUosSUFBSSxDQUFZO0FBQUUsUUFDbEIsbUJBQWMsR0FBZCxjQUFjLENBQW1CO0FBQUUsUUFDcEIsVUFBSyxHQUFMLEtBQUssQ0FBTztBQUN2QyxJQUFLLENBQUM7QUFDTixJQUNFLFdBQVcsQ0FBQyxPQUFzQjtBQUNwQyxRQUFJLHFFQUFxRTtBQUN6RSxRQUFJLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUksSUFBSSxDQUFDLEtBQXlCLENBQUMsQ0FBQztBQUN4RSxRQUFJLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBRSxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBRSxJQUFJLEVBQUUsQ0FBQztBQUN6RSxRQUNJLElBQUksQ0FBQyxHQUFHLEVBQUU7QUFDZCxZQUFNLE9BQU8sQ0FBQyxJQUFJLENBQ1YsbUJBQW1CLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJO0FBQ3hELGdCQUFRLCtFQUErRSxDQUNoRixDQUFDO0FBQ1IsU0FBSztBQUNMLFFBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztBQUM1QyxRQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkMsSUFBRSxDQUFDO0FBQ0g7Ozs7O2dPQUFDO0FBQ0Q7QUFBeUMsWUFyQnZCLFVBQVU7QUFDMUIsWUFBMEIsaUJBQWlCO0FBQzNDLFlBQWdDLEtBQUssdUJBQWxDLE1BQU0sU0FBQyxLQUFLO0FBQVMsRUFOckI7QUFBRTtFQU5OLFNBQVMsU0FBQyxwQkFNcUMsWUFYNUIsVUFBVTtZQU01QixaQU5pQyxZQUFZLGlCQUFpQjt3QkFNaEIsa0JBQzlDLFFBQVEsRUFBRSxwREFQeUQsWUFDNUQsS0FBSyx1QkFnQlQsTUFBTSxTQUFDLEtBQUs7QUFBUztRQVZlLG1CQUN2QywzQkFTNEI7QUFHaEIsbUJBUlgsS0FBSztBQUFLO0NBSnVDOzs7bURBRW5EOzs7Ozs7Ozs7OztBQVZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVNBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFGQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQW5CQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQVZBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWdCQSxBQUFBLEFBQUEsQUFBQSxBQUxBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBJbmplY3QsIENoYW5nZURldGVjdG9yUmVmLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSWNvbnMgfSBmcm9tICcuL2ljb25zLnByb3ZpZGVyJztcclxuaW1wb3J0IHsgdXBwZXJjYW1lbGNhc2UgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdidC1pY29uLCBib290c3RyYXAtaWNvbiwgYmknLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9uZy1ib290c3RyYXAtaWNvbnMuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWyAnLi9uZy1ib290c3RyYXAtaWNvbnMuY29tcG9uZW50LnNjc3MnIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCb290c3RyYXBJY29ucyBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgQElucHV0KCkgbmFtZSE6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGVsZW06IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgIEBJbmplY3QoSWNvbnMpIHByaXZhdGUgaWNvbnM6IEljb25zXHJcbiAgKSB7fVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAvLyBpY29ucyBhcmUgcHJvdmlkZWQgYXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyBiZWNhdXNlIG9mIFwibXVsdGk6IHRydWVcIlxyXG4gICAgY29uc3QgaWNvbnMgPSBPYmplY3QuYXNzaWduKHt9LCAuLi4odGhpcy5pY29ucyBhcyBhbnkgYXMgb2JqZWN0W10pKTtcclxuICAgIGNvbnN0IHN2ZyA9IGljb25zWyB1cHBlcmNhbWVsY2FzZShjaGFuZ2VzLm5hbWUuY3VycmVudFZhbHVlKSBdIHx8ICcnO1xyXG5cclxuICAgIGlmICghc3ZnKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICBgSWNvbiBub3QgZm91bmQ6ICR7Y2hhbmdlcy5uYW1lLmN1cnJlbnRWYWx1ZX1cXG5gICtcclxuICAgICAgICBgUmVmZXIgdG8gZG9jdW1lbnRhdGlvbiBvbiBodHRwczovL2dpdGh1Yi5jb20vYml1dGFzL25nLWJvb3RzdHJhcC1pY29ucy9pc3N1ZXNgXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gc3ZnO1xyXG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5tYXJrRm9yQ2hlY2soKTtcclxuICB9XHJcbn1cclxuIl19